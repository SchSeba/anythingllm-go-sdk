/*
AnythingLLM Developer API

API endpoints that enable programmatic reading, writing, and updating of your AnythingLLM instance. UI supplied by Swagger.io.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkspaceThreadsAPIService WorkspaceThreadsAPI service
type WorkspaceThreadsAPIService service

type ApiV1WorkspaceSlugThreadNewPostRequest struct {
	ctx context.Context
	ApiService *WorkspaceThreadsAPIService
	slug string
}

func (r ApiV1WorkspaceSlugThreadNewPostRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.V1WorkspaceSlugThreadNewPostExecute(r)
}

/*
V1WorkspaceSlugThreadNewPost Method for V1WorkspaceSlugThreadNewPost

Create a new workspace thread

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param slug Unique slug of workspace
 @return ApiV1WorkspaceSlugThreadNewPostRequest
*/
func (a *WorkspaceThreadsAPIService) V1WorkspaceSlugThreadNewPost(ctx context.Context, slug string) ApiV1WorkspaceSlugThreadNewPostRequest {
	return ApiV1WorkspaceSlugThreadNewPostRequest{
		ApiService: a,
		ctx: ctx,
		slug: slug,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WorkspaceThreadsAPIService) V1WorkspaceSlugThreadNewPostExecute(r ApiV1WorkspaceSlugThreadNewPostRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspaceThreadsAPIService.V1WorkspaceSlugThreadNewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/workspace/{slug}/thread/new"
	localVarPath = strings.Replace(localVarPath, "{"+"slug"+"}", url.PathEscape(parameterValueToString(r.slug, "slug")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InvalidAPIKey
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1WorkspaceSlugThreadThreadSlugChatPostRequest struct {
	ctx context.Context
	ApiService *WorkspaceThreadsAPIService
	slug string
	threadSlug string
	v1WorkspaceSlugThreadThreadSlugChatPostRequest *V1WorkspaceSlugThreadThreadSlugChatPostRequest
}

// Send a prompt to the workspace thread and the type of conversation (query or chat).
func (r ApiV1WorkspaceSlugThreadThreadSlugChatPostRequest) V1WorkspaceSlugThreadThreadSlugChatPostRequest(v1WorkspaceSlugThreadThreadSlugChatPostRequest V1WorkspaceSlugThreadThreadSlugChatPostRequest) ApiV1WorkspaceSlugThreadThreadSlugChatPostRequest {
	r.v1WorkspaceSlugThreadThreadSlugChatPostRequest = &v1WorkspaceSlugThreadThreadSlugChatPostRequest
	return r
}

func (r ApiV1WorkspaceSlugThreadThreadSlugChatPostRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.V1WorkspaceSlugThreadThreadSlugChatPostExecute(r)
}

/*
V1WorkspaceSlugThreadThreadSlugChatPost Method for V1WorkspaceSlugThreadThreadSlugChatPost

Chat with a workspace thread

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param slug Unique slug of workspace
 @param threadSlug Unique slug of thread
 @return ApiV1WorkspaceSlugThreadThreadSlugChatPostRequest
*/
func (a *WorkspaceThreadsAPIService) V1WorkspaceSlugThreadThreadSlugChatPost(ctx context.Context, slug string, threadSlug string) ApiV1WorkspaceSlugThreadThreadSlugChatPostRequest {
	return ApiV1WorkspaceSlugThreadThreadSlugChatPostRequest{
		ApiService: a,
		ctx: ctx,
		slug: slug,
		threadSlug: threadSlug,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WorkspaceThreadsAPIService) V1WorkspaceSlugThreadThreadSlugChatPostExecute(r ApiV1WorkspaceSlugThreadThreadSlugChatPostRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspaceThreadsAPIService.V1WorkspaceSlugThreadThreadSlugChatPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/workspace/{slug}/thread/{threadSlug}/chat"
	localVarPath = strings.Replace(localVarPath, "{"+"slug"+"}", url.PathEscape(parameterValueToString(r.slug, "slug")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"threadSlug"+"}", url.PathEscape(parameterValueToString(r.threadSlug, "threadSlug")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1WorkspaceSlugThreadThreadSlugChatPostRequest == nil {
		return localVarReturnValue, nil, reportError("v1WorkspaceSlugThreadThreadSlugChatPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1WorkspaceSlugThreadThreadSlugChatPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InvalidAPIKey
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1WorkspaceSlugThreadThreadSlugChatsGetRequest struct {
	ctx context.Context
	ApiService *WorkspaceThreadsAPIService
	slug string
	threadSlug string
}

func (r ApiV1WorkspaceSlugThreadThreadSlugChatsGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.V1WorkspaceSlugThreadThreadSlugChatsGetExecute(r)
}

/*
V1WorkspaceSlugThreadThreadSlugChatsGet Method for V1WorkspaceSlugThreadThreadSlugChatsGet

Get chats for a workspace thread

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param slug Unique slug of workspace
 @param threadSlug Unique slug of thread
 @return ApiV1WorkspaceSlugThreadThreadSlugChatsGetRequest
*/
func (a *WorkspaceThreadsAPIService) V1WorkspaceSlugThreadThreadSlugChatsGet(ctx context.Context, slug string, threadSlug string) ApiV1WorkspaceSlugThreadThreadSlugChatsGetRequest {
	return ApiV1WorkspaceSlugThreadThreadSlugChatsGetRequest{
		ApiService: a,
		ctx: ctx,
		slug: slug,
		threadSlug: threadSlug,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WorkspaceThreadsAPIService) V1WorkspaceSlugThreadThreadSlugChatsGetExecute(r ApiV1WorkspaceSlugThreadThreadSlugChatsGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspaceThreadsAPIService.V1WorkspaceSlugThreadThreadSlugChatsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/workspace/{slug}/thread/{threadSlug}/chats"
	localVarPath = strings.Replace(localVarPath, "{"+"slug"+"}", url.PathEscape(parameterValueToString(r.slug, "slug")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"threadSlug"+"}", url.PathEscape(parameterValueToString(r.threadSlug, "threadSlug")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InvalidAPIKey
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1WorkspaceSlugThreadThreadSlugDeleteRequest struct {
	ctx context.Context
	ApiService *WorkspaceThreadsAPIService
	slug string
	threadSlug string
}

func (r ApiV1WorkspaceSlugThreadThreadSlugDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1WorkspaceSlugThreadThreadSlugDeleteExecute(r)
}

/*
V1WorkspaceSlugThreadThreadSlugDelete Method for V1WorkspaceSlugThreadThreadSlugDelete

Delete a workspace thread

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param slug Unique slug of workspace
 @param threadSlug Unique slug of thread
 @return ApiV1WorkspaceSlugThreadThreadSlugDeleteRequest
*/
func (a *WorkspaceThreadsAPIService) V1WorkspaceSlugThreadThreadSlugDelete(ctx context.Context, slug string, threadSlug string) ApiV1WorkspaceSlugThreadThreadSlugDeleteRequest {
	return ApiV1WorkspaceSlugThreadThreadSlugDeleteRequest{
		ApiService: a,
		ctx: ctx,
		slug: slug,
		threadSlug: threadSlug,
	}
}

// Execute executes the request
func (a *WorkspaceThreadsAPIService) V1WorkspaceSlugThreadThreadSlugDeleteExecute(r ApiV1WorkspaceSlugThreadThreadSlugDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspaceThreadsAPIService.V1WorkspaceSlugThreadThreadSlugDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/workspace/{slug}/thread/{threadSlug}"
	localVarPath = strings.Replace(localVarPath, "{"+"slug"+"}", url.PathEscape(parameterValueToString(r.slug, "slug")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"threadSlug"+"}", url.PathEscape(parameterValueToString(r.threadSlug, "threadSlug")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InvalidAPIKey
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1WorkspaceSlugThreadThreadSlugStreamChatPostRequest struct {
	ctx context.Context
	ApiService *WorkspaceThreadsAPIService
	slug string
	threadSlug string
	v1WorkspaceSlugThreadThreadSlugChatPostRequest *V1WorkspaceSlugThreadThreadSlugChatPostRequest
}

// Send a prompt to the workspace thread and the type of conversation (query or chat).
func (r ApiV1WorkspaceSlugThreadThreadSlugStreamChatPostRequest) V1WorkspaceSlugThreadThreadSlugChatPostRequest(v1WorkspaceSlugThreadThreadSlugChatPostRequest V1WorkspaceSlugThreadThreadSlugChatPostRequest) ApiV1WorkspaceSlugThreadThreadSlugStreamChatPostRequest {
	r.v1WorkspaceSlugThreadThreadSlugChatPostRequest = &v1WorkspaceSlugThreadThreadSlugChatPostRequest
	return r
}

func (r ApiV1WorkspaceSlugThreadThreadSlugStreamChatPostRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.V1WorkspaceSlugThreadThreadSlugStreamChatPostExecute(r)
}

/*
V1WorkspaceSlugThreadThreadSlugStreamChatPost Method for V1WorkspaceSlugThreadThreadSlugStreamChatPost

Stream chat with a workspace thread

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param slug Unique slug of workspace
 @param threadSlug Unique slug of thread
 @return ApiV1WorkspaceSlugThreadThreadSlugStreamChatPostRequest
*/
func (a *WorkspaceThreadsAPIService) V1WorkspaceSlugThreadThreadSlugStreamChatPost(ctx context.Context, slug string, threadSlug string) ApiV1WorkspaceSlugThreadThreadSlugStreamChatPostRequest {
	return ApiV1WorkspaceSlugThreadThreadSlugStreamChatPostRequest{
		ApiService: a,
		ctx: ctx,
		slug: slug,
		threadSlug: threadSlug,
	}
}

// Execute executes the request
//  @return []string
func (a *WorkspaceThreadsAPIService) V1WorkspaceSlugThreadThreadSlugStreamChatPostExecute(r ApiV1WorkspaceSlugThreadThreadSlugStreamChatPostRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspaceThreadsAPIService.V1WorkspaceSlugThreadThreadSlugStreamChatPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/workspace/{slug}/thread/{threadSlug}/stream-chat"
	localVarPath = strings.Replace(localVarPath, "{"+"slug"+"}", url.PathEscape(parameterValueToString(r.slug, "slug")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"threadSlug"+"}", url.PathEscape(parameterValueToString(r.threadSlug, "threadSlug")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1WorkspaceSlugThreadThreadSlugChatPostRequest == nil {
		return localVarReturnValue, nil, reportError("v1WorkspaceSlugThreadThreadSlugChatPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/event-stream", "application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1WorkspaceSlugThreadThreadSlugChatPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InvalidAPIKey
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1WorkspaceSlugThreadThreadSlugUpdatePostRequest struct {
	ctx context.Context
	ApiService *WorkspaceThreadsAPIService
	slug string
	threadSlug string
}

func (r ApiV1WorkspaceSlugThreadThreadSlugUpdatePostRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.V1WorkspaceSlugThreadThreadSlugUpdatePostExecute(r)
}

/*
V1WorkspaceSlugThreadThreadSlugUpdatePost Method for V1WorkspaceSlugThreadThreadSlugUpdatePost

Update thread name by its unique slug.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param slug Unique slug of workspace
 @param threadSlug Unique slug of thread
 @return ApiV1WorkspaceSlugThreadThreadSlugUpdatePostRequest
*/
func (a *WorkspaceThreadsAPIService) V1WorkspaceSlugThreadThreadSlugUpdatePost(ctx context.Context, slug string, threadSlug string) ApiV1WorkspaceSlugThreadThreadSlugUpdatePostRequest {
	return ApiV1WorkspaceSlugThreadThreadSlugUpdatePostRequest{
		ApiService: a,
		ctx: ctx,
		slug: slug,
		threadSlug: threadSlug,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WorkspaceThreadsAPIService) V1WorkspaceSlugThreadThreadSlugUpdatePostExecute(r ApiV1WorkspaceSlugThreadThreadSlugUpdatePostRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspaceThreadsAPIService.V1WorkspaceSlugThreadThreadSlugUpdatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/workspace/{slug}/thread/{threadSlug}/update"
	localVarPath = strings.Replace(localVarPath, "{"+"slug"+"}", url.PathEscape(parameterValueToString(r.slug, "slug")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"threadSlug"+"}", url.PathEscape(parameterValueToString(r.threadSlug, "threadSlug")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InvalidAPIKey
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
